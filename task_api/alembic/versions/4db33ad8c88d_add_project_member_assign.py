"""Add Project, Member, Assign

Revision ID: 4db33ad8c88d
Revises: 6cb42cd6331d
Create Date: 2025-07-12 19:39:25.133452

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "4db33ad8c88d"
down_revision: Union[str, None] = "6cb42cd6331d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    # Создаём перечисления (enum), один объект — одно имя, используем повторно
    member_role_enum = sa.Enum(
        "member", "admin", "owner", name="member_role_enum", create_type=False
    )
    # member_role_enum.create(op.get_bind(), checkfirst=True)

    member_status_enum = sa.Enum(
        "active", "blocked", name="member_status_enum", create_type=False
    )
    # member_status_enum.create(op.get_bind(), checkfirst=True)

    task_status_enum = sa.Enum(
        "created",
        "in_progress",
        "pending",
        "closed",
        name="task_status_enum",
        create_type=False,
    )
    task_status_enum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - adjusted ###
    op.create_table(
        "projects",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_projects_created_at"), "projects", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_projects_id"), "projects", ["id"], unique=False)

    op.create_table(
        "members",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            member_role_enum,
            server_default="member",
            nullable=False,
        ),
        sa.Column(
            "status",
            member_status_enum,
            server_default="active",
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_members_created_at"), "members", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_members_id"), "members", ["id"], unique=False)

    op.create_table(
        "assignees",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("member_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["member_id"], ["members.id"]),
        sa.ForeignKeyConstraint(["task_id"], ["tasks.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_assignees_created_at"), "assignees", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_assignees_id"), "assignees", ["id"], unique=False)

    op.drop_constraint(op.f("comments_author_id_fkey"), "comments", type_="foreignkey")
    op.create_foreign_key(None, "comments", "members", ["author_id"], ["id"])

    op.alter_column(
        "tasks",
        "status",
        existing_type=sa.VARCHAR(length=63),
        type_=task_status_enum,
        existing_nullable=False,
        postgresql_using="status::task_status_enum",
    )
    op.add_column(
        "tasks",
        sa.Column("project_id", sa.Integer(), nullable=False),
    )
    op.create_foreign_key(
        "tasks_project_id_fkey",  # явное имя ограничения
        "tasks",
        "projects",
        ["project_id"],
        ["id"],
    )

    op.drop_constraint(op.f("tasks_author_id_fkey"), "tasks", type_="foreignkey")
    op.drop_constraint(op.f("tasks_assigned_id_fkey"), "tasks", type_="foreignkey")
    op.create_foreign_key(None, "tasks", "members", ["author_id"], ["id"])
    op.drop_column("tasks", "assigned_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""

    # ### commands auto generated by Alembic - adjusted ###
    op.add_column(
        "tasks",
        sa.Column("assigned_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint("tasks_author_id_fkey", "tasks", type_="foreignkey")

    op.create_foreign_key(
        op.f("tasks_assigned_id_fkey"), "tasks", "users", ["assigned_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("tasks_author_id_fkey"), "tasks", "users", ["author_id"], ["id"]
    )
    op.alter_column(
        "tasks",
        "status",
        existing_type=sa.Enum(
            "created", "in_progress", "pending", "closed", name="task_status_enum"
        ),
        type_=sa.VARCHAR(length=63),
        existing_nullable=False,
        postgresql_using="status::text",
    )
    op.drop_constraint("comments_author_id_fkey", "comments", type_="foreignkey")
    op.drop_constraint("tasks_project_id_fkey", "tasks", type_="foreignkey")
    op.drop_column("tasks", "project_id")
    op.create_foreign_key(
        op.f("comments_author_id_fkey"), "comments", "users", ["author_id"], ["id"]
    )

    op.drop_index(op.f("ix_assignees_id"), table_name="assignees")
    op.drop_index(op.f("ix_assignees_created_at"), table_name="assignees")
    op.drop_table("assignees")

    op.drop_index(op.f("ix_members_id"), table_name="members")
    op.drop_index(op.f("ix_members_created_at"), table_name="members")
    op.drop_table("members")

    op.drop_index(op.f("ix_projects_id"), table_name="projects")
    op.drop_index(op.f("ix_projects_created_at"), table_name="projects")
    op.drop_table("projects")

    # Удаляем ENUM'ы — сначала task_status_enum, затем member_status_enum, потом member_role_enum
    task_status_enum = sa.Enum(
        "created", "in_progress", "pending", "closed", name="task_status_enum"
    )
    member_status_enum = sa.Enum("active", "blocked", name="member_status_enum")
    member_role_enum = sa.Enum("member", "admin", "owner", name="member_role_enum")

    task_status_enum.drop(op.get_bind(), checkfirst=True)
    member_status_enum.drop(op.get_bind(), checkfirst=True)
    member_role_enum.drop(op.get_bind(), checkfirst=True)
